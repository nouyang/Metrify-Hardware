
metroidFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000686  0000071a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000686  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800108  00800108  00000722  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000724  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000e75  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000127  00000000  00000000  00000e95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000033a  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000010c  00000000  00000000  000012f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005c2  00000000  00000000  00001402  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000e0  00000000  00000000  000019c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001ef  00000000  00000000  00001aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000002b  00000000  00000000  00001c93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e8       	ldi	r30, 0x86	; 134
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 22 03 	call	0x644	; 0x644 <main>
  9e:	0c 94 41 03 	jmp	0x682	; 0x682 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <delay_us>:
#include <avr/io.h>
void delay_us(unsigned int x)//(uint8_t x)
{
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	00 d0       	rcall	.+0      	; 0xac <delay_us+0x6>
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	9a 83       	std	Y+2, r25	; 0x02
  b2:	89 83       	std	Y+1, r24	; 0x01
	TIFR2 = 0x01; //Clear any interrupt flags on Timer2
  b4:	87 e3       	ldi	r24, 0x37	; 55
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
	
    TCNT2 = 256 - x; //256 - 125 = 131 : Preload timer 2 for x clicks. Should be 1us per click
  be:	82 eb       	ldi	r24, 0xB2	; 178
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	29 81       	ldd	r18, Y+1	; 0x01
  c4:	21 95       	neg	r18
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
	//Init Timer0
    //TCCR0B = (1<<CS00); //Set Prescaler to No Prescaling (assume we are running at internal 1MHz). CS00=1 
	TCCR2B = (1<<CS20); //Set Prescaler to 1. CS20=1
  ca:	81 eb       	ldi	r24, 0xB1	; 177
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18

	while( (TIFR2 & (1<<TOV2)) == 0);
  d4:	00 00       	nop
  d6:	87 e3       	ldi	r24, 0x37	; 55
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	fc 01       	movw	r30, r24
  dc:	80 81       	ld	r24, Z
  de:	88 2f       	mov	r24, r24
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	81 70       	andi	r24, 0x01	; 1
  e4:	90 70       	andi	r25, 0x00	; 0
  e6:	00 97       	sbiw	r24, 0x00	; 0
  e8:	b1 f3       	breq	.-20     	; 0xd6 <delay_us+0x30>
}
  ea:	0f 90       	pop	r0
  ec:	0f 90       	pop	r0
  ee:	cf 91       	pop	r28
  f0:	df 91       	pop	r29
  f2:	08 95       	ret

000000f4 <delay_ms>:

//General short delays
void delay_ms(uint16_t x)
{
  f4:	df 93       	push	r29
  f6:	cf 93       	push	r28
  f8:	00 d0       	rcall	.+0      	; 0xfa <delay_ms+0x6>
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	9a 83       	std	Y+2, r25	; 0x02
 100:	89 83       	std	Y+1, r24	; 0x01
	
	for (; x > 0 ; x--)
 102:	15 c0       	rjmp	.+42     	; 0x12e <delay_ms+0x3a>
	{
		delay_us(250);
 104:	8a ef       	ldi	r24, 0xFA	; 250
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_us>
		delay_us(250);
 10c:	8a ef       	ldi	r24, 0xFA	; 250
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_us>
		delay_us(250);
 114:	8a ef       	ldi	r24, 0xFA	; 250
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_us>
		delay_us(250);
 11c:	8a ef       	ldi	r24, 0xFA	; 250
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_us>

//General short delays
void delay_ms(uint16_t x)
{
	
	for (; x > 0 ; x--)
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	9a 81       	ldd	r25, Y+2	; 0x02
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	9a 83       	std	Y+2, r25	; 0x02
 12c:	89 83       	std	Y+1, r24	; 0x01
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	9a 81       	ldd	r25, Y+2	; 0x02
 132:	00 97       	sbiw	r24, 0x00	; 0
 134:	39 f7       	brne	.-50     	; 0x104 <delay_ms+0x10>
		delay_us(250);
		delay_us(250);
		delay_us(250);
		delay_us(250);
	}
}
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	cf 91       	pop	r28
 13c:	df 91       	pop	r29
 13e:	08 95       	ret

00000140 <init_24L01_pins>:
//Basic SPI to nRF
uint8_t tx_spi_byte(uint8_t outgoing);

//Initializes ATMega168 pins
void init_24L01_pins(void)
{
 140:	df 93       	push	r29
 142:	cf 93       	push	r28
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
	//1 = Output, 0 = Input
	L01_PORT_DD |= ((1<<MOSI) | (1<<L01_SCK));
 148:	84 e2       	ldi	r24, 0x24	; 36
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	24 e2       	ldi	r18, 0x24	; 36
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	f9 01       	movw	r30, r18
 152:	20 81       	ld	r18, Z
 154:	28 62       	ori	r18, 0x28	; 40
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18
	L01_AUX_DD	|= ((1<<L01_CE)| (1<<L01_CSN));
 15a:	8a e2       	ldi	r24, 0x2A	; 42
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	2a e2       	ldi	r18, 0x2A	; 42
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	f9 01       	movw	r30, r18
 164:	20 81       	ld	r18, Z
 166:	22 64       	ori	r18, 0x42	; 66
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18

	//Enable pull-up resistors (page 74)
	L01_PORT = 0b11111111;
 16c:	85 e2       	ldi	r24, 0x25	; 37
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18

	cbi(L01_AUX_PORT, L01_CE); //Stand by mode
 176:	8b e2       	ldi	r24, 0x2B	; 43
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	2b e2       	ldi	r18, 0x2B	; 43
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	f9 01       	movw	r30, r18
 180:	20 81       	ld	r18, Z
 182:	2f 7b       	andi	r18, 0xBF	; 191
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
}
 188:	cf 91       	pop	r28
 18a:	df 91       	pop	r29
 18c:	08 95       	ret

0000018e <transmit_string>:


//Sends a string out through nRF
void transmit_string(char * string_out)
{
 18e:	df 93       	push	r29
 190:	cf 93       	push	r28
 192:	00 d0       	rcall	.+0      	; 0x194 <transmit_string+0x6>
 194:	0f 92       	push	r0
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	9b 83       	std	Y+3, r25	; 0x03
 19c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i;
	
	for(i = 0 ; string_out[i] != '\0' ; i++)
 19e:	19 82       	std	Y+1, r1	; 0x01
 1a0:	14 c0       	rjmp	.+40     	; 0x1ca <transmit_string+0x3c>
	{
		data_array[1] = string_out[i];
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	88 2f       	mov	r24, r24
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	2a 81       	ldd	r18, Y+2	; 0x02
 1aa:	3b 81       	ldd	r19, Y+3	; 0x03
 1ac:	82 0f       	add	r24, r18
 1ae:	93 1f       	adc	r25, r19
 1b0:	fc 01       	movw	r30, r24
 1b2:	80 81       	ld	r24, Z
 1b4:	80 93 0d 01 	sts	0x010D, r24
		tx_data_nRF24L01();
 1b8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <tx_data_nRF24L01>
		delay_ms(5);
 1bc:	85 e0       	ldi	r24, 0x05	; 5
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 7a 00 	call	0xf4	; 0xf4 <delay_ms>
//Sends a string out through nRF
void transmit_string(char * string_out)
{
	uint8_t i;
	
	for(i = 0 ; string_out[i] != '\0' ; i++)
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	8f 5f       	subi	r24, 0xFF	; 255
 1c8:	89 83       	std	Y+1, r24	; 0x01
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	88 2f       	mov	r24, r24
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	2a 81       	ldd	r18, Y+2	; 0x02
 1d2:	3b 81       	ldd	r19, Y+3	; 0x03
 1d4:	82 0f       	add	r24, r18
 1d6:	93 1f       	adc	r25, r19
 1d8:	fc 01       	movw	r30, r24
 1da:	80 81       	ld	r24, Z
 1dc:	88 23       	and	r24, r24
 1de:	09 f7       	brne	.-62     	; 0x1a2 <transmit_string+0x14>
		data_array[1] = string_out[i];
		tx_data_nRF24L01();
		delay_ms(5);
	}

	data_array[1] = '\0';
 1e0:	10 92 0d 01 	sts	0x010D, r1
	tx_data_nRF24L01();
 1e4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <tx_data_nRF24L01>
	delay_ms(5);
 1e8:	85 e0       	ldi	r24, 0x05	; 5
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 7a 00 	call	0xf4	; 0xf4 <delay_ms>
}
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	cf 91       	pop	r28
 1f8:	df 91       	pop	r29
 1fa:	08 95       	ret

000001fc <tx_data_nRF24L01>:

//This sends out the data stored in the data_array
//data_array must be setup before calling this function
void tx_data_nRF24L01(void)
{
 1fc:	df 93       	push	r29
 1fe:	cf 93       	push	r28
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
	send_command(0x27, 0x7E); //Clear any interrupts
 204:	87 e2       	ldi	r24, 0x27	; 39
 206:	6e e7       	ldi	r22, 0x7E	; 126
 208:	0e 94 a1 01 	call	0x342	; 0x342 <send_command>
	
	send_command(0x20, 0x7A); //Power up and be a transmitter
 20c:	80 e2       	ldi	r24, 0x20	; 32
 20e:	6a e7       	ldi	r22, 0x7A	; 122
 210:	0e 94 a1 01 	call	0x342	; 0x342 <send_command>

	send_byte(0xE1); //Clear TX Fifo
 214:	81 ee       	ldi	r24, 0xE1	; 225
 216:	0e 94 c9 01 	call	0x392	; 0x392 <send_byte>
	
	tx_send_payload(0xA0, 4); //Clock in 4 byte payload of data_array
 21a:	80 ea       	ldi	r24, 0xA0	; 160
 21c:	64 e0       	ldi	r22, 0x04	; 4
 21e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <tx_send_payload>

    sbi(L01_AUX_PORT, L01_CE); //Pulse CE to start transmission
 222:	8b e2       	ldi	r24, 0x2B	; 43
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	2b e2       	ldi	r18, 0x2B	; 43
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	f9 01       	movw	r30, r18
 22c:	20 81       	ld	r18, Z
 22e:	20 64       	ori	r18, 0x40	; 64
 230:	fc 01       	movw	r30, r24
 232:	20 83       	st	Z, r18
    delay_ms(1);
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 7a 00 	call	0xf4	; 0xf4 <delay_ms>
    cbi(L01_AUX_PORT, L01_CE);
 23c:	8b e2       	ldi	r24, 0x2B	; 43
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	2b e2       	ldi	r18, 0x2B	; 43
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	f9 01       	movw	r30, r18
 246:	20 81       	ld	r18, Z
 248:	2f 7b       	andi	r18, 0xBF	; 191
 24a:	fc 01       	movw	r30, r24
 24c:	20 83       	st	Z, r18
}
 24e:	cf 91       	pop	r28
 250:	df 91       	pop	r29
 252:	08 95       	ret

00000254 <config_tx_nRF24L01>:

//Set up nRF24L01 as a transmitter, does not actually send the data,
//(need to call tx_data_nRF24L01() for that)
uint8_t config_tx_nRF24L01(void)
{
 254:	df 93       	push	r29
 256:	cf 93       	push	r28
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
    cbi(L01_AUX_PORT, L01_CE); //Go into standby mode
 25c:	8b e2       	ldi	r24, 0x2B	; 43
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	2b e2       	ldi	r18, 0x2B	; 43
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	f9 01       	movw	r30, r18
 266:	20 81       	ld	r18, Z
 268:	2f 7b       	andi	r18, 0xBF	; 191
 26a:	fc 01       	movw	r30, r24
 26c:	20 83       	st	Z, r18
	
	send_command(0x20, 0x7C); //16 bit CRC enabled, be a transmitter
 26e:	80 e2       	ldi	r24, 0x20	; 32
 270:	6c e7       	ldi	r22, 0x7C	; 124
 272:	0e 94 a1 01 	call	0x342	; 0x342 <send_command>

	send_command(0x21, 0x00); //Disable auto acknowledge on all pipes
 276:	81 e2       	ldi	r24, 0x21	; 33
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	0e 94 a1 01 	call	0x342	; 0x342 <send_command>

	send_command(0x24, 0x00); //Disable auto-retransmit
 27e:	84 e2       	ldi	r24, 0x24	; 36
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	0e 94 a1 01 	call	0x342	; 0x342 <send_command>

	send_command(0x23, 0x03); //Set address width to 5bytes (default, not really needed)
 286:	83 e2       	ldi	r24, 0x23	; 35
 288:	63 e0       	ldi	r22, 0x03	; 3
 28a:	0e 94 a1 01 	call	0x342	; 0x342 <send_command>

	send_command(0x26, 0x07); //Air data rate 1Mbit, 0dBm, Setup LNA
 28e:	86 e2       	ldi	r24, 0x26	; 38
 290:	67 e0       	ldi	r22, 0x07	; 7
 292:	0e 94 a1 01 	call	0x342	; 0x342 <send_command>

	send_command(0x25, 0x02); //RF Channel 2 (default, not really needed)
 296:	85 e2       	ldi	r24, 0x25	; 37
 298:	62 e0       	ldi	r22, 0x02	; 2
 29a:	0e 94 a1 01 	call	0x342	; 0x342 <send_command>
	
	
	data_array[0] = 0xE7;
 29e:	87 ee       	ldi	r24, 0xE7	; 231
 2a0:	80 93 0c 01 	sts	0x010C, r24
	data_array[1] = 0xE7;
 2a4:	87 ee       	ldi	r24, 0xE7	; 231
 2a6:	80 93 0d 01 	sts	0x010D, r24
	data_array[2] = 0xE7;
 2aa:	87 ee       	ldi	r24, 0xE7	; 231
 2ac:	80 93 0e 01 	sts	0x010E, r24
	data_array[3] = 0xE7;
 2b0:	87 ee       	ldi	r24, 0xE7	; 231
 2b2:	80 93 0f 01 	sts	0x010F, r24
	data_array[4] = 0xE7;
 2b6:	87 ee       	ldi	r24, 0xE7	; 231
 2b8:	80 93 10 01 	sts	0x0110, r24
	tx_send_payload(0x30, 5); //Set TX address
 2bc:	80 e3       	ldi	r24, 0x30	; 48
 2be:	65 e0       	ldi	r22, 0x05	; 5
 2c0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <tx_send_payload>
	
	send_command(0x20, 0x7A); //Power up, be a transmitter
 2c4:	80 e2       	ldi	r24, 0x20	; 32
 2c6:	6a e7       	ldi	r22, 0x7A	; 122
 2c8:	0e 94 a1 01 	call	0x342	; 0x342 <send_command>

	return(send_byte(0xFF));
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	0e 94 c9 01 	call	0x392	; 0x392 <send_byte>
}
 2d2:	cf 91       	pop	r28
 2d4:	df 91       	pop	r29
 2d6:	08 95       	ret

000002d8 <tx_send_payload>:

//Sends a number of bytes of payload
void tx_send_payload(uint8_t cmd, uint8_t bytes)
{
 2d8:	df 93       	push	r29
 2da:	cf 93       	push	r28
 2dc:	00 d0       	rcall	.+0      	; 0x2de <tx_send_payload+0x6>
 2de:	0f 92       	push	r0
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	8a 83       	std	Y+2, r24	; 0x02
 2e6:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t i;

	cbi(L01_AUX_PORT, L01_CSN); //Select chip
 2e8:	8b e2       	ldi	r24, 0x2B	; 43
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	2b e2       	ldi	r18, 0x2B	; 43
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	f9 01       	movw	r30, r18
 2f2:	20 81       	ld	r18, Z
 2f4:	2d 7f       	andi	r18, 0xFD	; 253
 2f6:	fc 01       	movw	r30, r24
 2f8:	20 83       	st	Z, r18
	tx_spi_byte(cmd);
 2fa:	8a 81       	ldd	r24, Y+2	; 0x02
 2fc:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <tx_spi_byte>
	
	for(i = 0 ; i < bytes ; i++)
 300:	19 82       	std	Y+1, r1	; 0x01
 302:	0c c0       	rjmp	.+24     	; 0x31c <tx_send_payload+0x44>
		tx_spi_byte(data_array[i]);
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	88 2f       	mov	r24, r24
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	84 5f       	subi	r24, 0xF4	; 244
 30c:	9e 4f       	sbci	r25, 0xFE	; 254
 30e:	fc 01       	movw	r30, r24
 310:	80 81       	ld	r24, Z
 312:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <tx_spi_byte>
	uint8_t i;

	cbi(L01_AUX_PORT, L01_CSN); //Select chip
	tx_spi_byte(cmd);
	
	for(i = 0 ; i < bytes ; i++)
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	8f 5f       	subi	r24, 0xFF	; 255
 31a:	89 83       	std	Y+1, r24	; 0x01
 31c:	99 81       	ldd	r25, Y+1	; 0x01
 31e:	8b 81       	ldd	r24, Y+3	; 0x03
 320:	98 17       	cp	r25, r24
 322:	80 f3       	brcs	.-32     	; 0x304 <tx_send_payload+0x2c>
		tx_spi_byte(data_array[i]);

	sbi(L01_AUX_PORT, L01_CSN); //Deselect chip
 324:	8b e2       	ldi	r24, 0x2B	; 43
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	2b e2       	ldi	r18, 0x2B	; 43
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	f9 01       	movw	r30, r18
 32e:	20 81       	ld	r18, Z
 330:	22 60       	ori	r18, 0x02	; 2
 332:	fc 01       	movw	r30, r24
 334:	20 83       	st	Z, r18
}
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	0f 90       	pop	r0
 33c:	cf 91       	pop	r28
 33e:	df 91       	pop	r29
 340:	08 95       	ret

00000342 <send_command>:

//Sends command to nRF, returns status byte
uint8_t send_command(uint8_t cmd, uint8_t data)
{
 342:	df 93       	push	r29
 344:	cf 93       	push	r28
 346:	00 d0       	rcall	.+0      	; 0x348 <send_command+0x6>
 348:	0f 92       	push	r0
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
 34e:	8a 83       	std	Y+2, r24	; 0x02
 350:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t status;

	cbi(L01_AUX_PORT, L01_CSN); //Select chip
 352:	8b e2       	ldi	r24, 0x2B	; 43
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	2b e2       	ldi	r18, 0x2B	; 43
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	f9 01       	movw	r30, r18
 35c:	20 81       	ld	r18, Z
 35e:	2d 7f       	andi	r18, 0xFD	; 253
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18
	tx_spi_byte(cmd);
 364:	8a 81       	ldd	r24, Y+2	; 0x02
 366:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <tx_spi_byte>
	status = tx_spi_byte(data);
 36a:	8b 81       	ldd	r24, Y+3	; 0x03
 36c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <tx_spi_byte>
 370:	89 83       	std	Y+1, r24	; 0x01
	sbi(L01_AUX_PORT, L01_CSN); //Deselect chip
 372:	8b e2       	ldi	r24, 0x2B	; 43
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	2b e2       	ldi	r18, 0x2B	; 43
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	f9 01       	movw	r30, r18
 37c:	20 81       	ld	r18, Z
 37e:	22 60       	ori	r18, 0x02	; 2
 380:	fc 01       	movw	r30, r24
 382:	20 83       	st	Z, r18

	return(status);
 384:	89 81       	ldd	r24, Y+1	; 0x01
}
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	cf 91       	pop	r28
 38e:	df 91       	pop	r29
 390:	08 95       	ret

00000392 <send_byte>:

//Sends one byte to nRF
uint8_t send_byte(uint8_t cmd)
{
 392:	df 93       	push	r29
 394:	cf 93       	push	r28
 396:	00 d0       	rcall	.+0      	; 0x398 <send_byte+0x6>
 398:	cd b7       	in	r28, 0x3d	; 61
 39a:	de b7       	in	r29, 0x3e	; 62
 39c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;
	
	cbi(L01_AUX_PORT, L01_CSN); //Select chip
 39e:	8b e2       	ldi	r24, 0x2B	; 43
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	2b e2       	ldi	r18, 0x2B	; 43
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	f9 01       	movw	r30, r18
 3a8:	20 81       	ld	r18, Z
 3aa:	2d 7f       	andi	r18, 0xFD	; 253
 3ac:	fc 01       	movw	r30, r24
 3ae:	20 83       	st	Z, r18
	status = tx_spi_byte(cmd);
 3b0:	8a 81       	ldd	r24, Y+2	; 0x02
 3b2:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <tx_spi_byte>
 3b6:	89 83       	std	Y+1, r24	; 0x01
	sbi(L01_AUX_PORT, L01_CSN); //Deselect chip
 3b8:	8b e2       	ldi	r24, 0x2B	; 43
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	2b e2       	ldi	r18, 0x2B	; 43
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	f9 01       	movw	r30, r18
 3c2:	20 81       	ld	r18, Z
 3c4:	22 60       	ori	r18, 0x02	; 2
 3c6:	fc 01       	movw	r30, r24
 3c8:	20 83       	st	Z, r18
	
	return(status);
 3ca:	89 81       	ldd	r24, Y+1	; 0x01
}
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	cf 91       	pop	r28
 3d2:	df 91       	pop	r29
 3d4:	08 95       	ret

000003d6 <tx_spi_byte>:

//Basic SPI to nRF24L01
uint8_t tx_spi_byte(uint8_t outgoing)
{
 3d6:	df 93       	push	r29
 3d8:	cf 93       	push	r28
 3da:	00 d0       	rcall	.+0      	; 0x3dc <tx_spi_byte+0x6>
 3dc:	0f 92       	push	r0
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
 3e2:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t i, incoming;
	incoming = 0;
 3e4:	1a 82       	std	Y+2, r1	; 0x02
	
	
    //Send outgoing byte
    for(i = 0 ; i < 8 ; i++)
 3e6:	19 82       	std	Y+1, r1	; 0x01
 3e8:	46 c0       	rjmp	.+140    	; 0x476 <tx_spi_byte+0xa0>
    {
		
		if(outgoing & 0b10000000)
 3ea:	8b 81       	ldd	r24, Y+3	; 0x03
 3ec:	88 23       	and	r24, r24
 3ee:	54 f4       	brge	.+20     	; 0x404 <tx_spi_byte+0x2e>
			sbi(L01_PORT, MOSI);
 3f0:	85 e2       	ldi	r24, 0x25	; 37
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	25 e2       	ldi	r18, 0x25	; 37
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	f9 01       	movw	r30, r18
 3fa:	20 81       	ld	r18, Z
 3fc:	28 60       	ori	r18, 0x08	; 8
 3fe:	fc 01       	movw	r30, r24
 400:	20 83       	st	Z, r18
 402:	09 c0       	rjmp	.+18     	; 0x416 <tx_spi_byte+0x40>
		else
			cbi(L01_PORT, MOSI);
 404:	85 e2       	ldi	r24, 0x25	; 37
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	25 e2       	ldi	r18, 0x25	; 37
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	f9 01       	movw	r30, r18
 40e:	20 81       	ld	r18, Z
 410:	27 7f       	andi	r18, 0xF7	; 247
 412:	fc 01       	movw	r30, r24
 414:	20 83       	st	Z, r18
		
		sbi(L01_PORT, L01_SCK); //L01_SCK = 1;
 416:	85 e2       	ldi	r24, 0x25	; 37
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	25 e2       	ldi	r18, 0x25	; 37
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	f9 01       	movw	r30, r18
 420:	20 81       	ld	r18, Z
 422:	20 62       	ori	r18, 0x20	; 32
 424:	fc 01       	movw	r30, r24
 426:	20 83       	st	Z, r18
		delay_us(RF_DELAY);
 428:	85 e0       	ldi	r24, 0x05	; 5
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_us>
		
		//MISO bit is valid after clock goes going high
		incoming <<= 1;
 430:	8a 81       	ldd	r24, Y+2	; 0x02
 432:	88 0f       	add	r24, r24
 434:	8a 83       	std	Y+2, r24	; 0x02
		if(L01_PORT_PIN & (1<<MISO)) incoming |= 0x01; //this line is fucking up
 436:	83 e2       	ldi	r24, 0x23	; 35
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	fc 01       	movw	r30, r24
 43c:	80 81       	ld	r24, Z
 43e:	88 2f       	mov	r24, r24
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	80 71       	andi	r24, 0x10	; 16
 444:	90 70       	andi	r25, 0x00	; 0
 446:	00 97       	sbiw	r24, 0x00	; 0
 448:	19 f0       	breq	.+6      	; 0x450 <tx_spi_byte+0x7a>
 44a:	8a 81       	ldd	r24, Y+2	; 0x02
 44c:	81 60       	ori	r24, 0x01	; 1
 44e:	8a 83       	std	Y+2, r24	; 0x02
		
		cbi(L01_PORT, L01_SCK); //L01_SCK = 0; 
 450:	85 e2       	ldi	r24, 0x25	; 37
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	25 e2       	ldi	r18, 0x25	; 37
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	f9 01       	movw	r30, r18
 45a:	20 81       	ld	r18, Z
 45c:	2f 7d       	andi	r18, 0xDF	; 223
 45e:	fc 01       	movw	r30, r24
 460:	20 83       	st	Z, r18
		delay_us(RF_DELAY);
 462:	85 e0       	ldi	r24, 0x05	; 5
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_us>
		
        outgoing <<= 1;
 46a:	8b 81       	ldd	r24, Y+3	; 0x03
 46c:	88 0f       	add	r24, r24
 46e:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t i, incoming;
	incoming = 0;
	
	
    //Send outgoing byte
    for(i = 0 ; i < 8 ; i++)
 470:	89 81       	ldd	r24, Y+1	; 0x01
 472:	8f 5f       	subi	r24, 0xFF	; 255
 474:	89 83       	std	Y+1, r24	; 0x01
 476:	89 81       	ldd	r24, Y+1	; 0x01
 478:	88 30       	cpi	r24, 0x08	; 8
 47a:	08 f4       	brcc	.+2      	; 0x47e <tx_spi_byte+0xa8>
 47c:	b6 cf       	rjmp	.-148    	; 0x3ea <tx_spi_byte+0x14>
        outgoing <<= 1;
		
    }
	

	return(incoming);
 47e:	8a 81       	ldd	r24, Y+2	; 0x02
}
 480:	0f 90       	pop	r0
 482:	0f 90       	pop	r0
 484:	0f 90       	pop	r0
 486:	cf 91       	pop	r28
 488:	df 91       	pop	r29
 48a:	08 95       	ret

0000048c <config_rx_nRF24L01>:


//Configures nRF24L01 for recieve mode
void config_rx_nRF24L01(void)
{
 48c:	df 93       	push	r29
 48e:	cf 93       	push	r28
 490:	cd b7       	in	r28, 0x3d	; 61
 492:	de b7       	in	r29, 0x3e	; 62
	cbi(L01_AUX_PORT, L01_CE);//CE = 0
 494:	8b e2       	ldi	r24, 0x2B	; 43
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	2b e2       	ldi	r18, 0x2B	; 43
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	f9 01       	movw	r30, r18
 49e:	20 81       	ld	r18, Z
 4a0:	2f 7b       	andi	r18, 0xBF	; 191
 4a2:	fc 01       	movw	r30, r24
 4a4:	20 83       	st	Z, r18
    
	send_command(0x20, 0x3D);//PRX, 16 bit CRC enabled===========================================================
 4a6:	80 e2       	ldi	r24, 0x20	; 32
 4a8:	6d e3       	ldi	r22, 0x3D	; 61
 4aa:	0e 94 a1 01 	call	0x342	; 0x342 <send_command>
	
    send_command(0x21, 0);//dissable auto-ack for all channels====================================================
 4ae:	81 e2       	ldi	r24, 0x21	; 33
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	0e 94 a1 01 	call	0x342	; 0x342 <send_command>
	
    send_command(0x26, 0x07);//data rate = 1MB ===============================================================
 4b6:	86 e2       	ldi	r24, 0x26	; 38
 4b8:	67 e0       	ldi	r22, 0x07	; 7
 4ba:	0e 94 a1 01 	call	0x342	; 0x342 <send_command>
    
    send_command(0x31, 0x04);//4 byte payload ==============================================================
 4be:	81 e3       	ldi	r24, 0x31	; 49
 4c0:	64 e0       	ldi	r22, 0x04	; 4
 4c2:	0e 94 a1 01 	call	0x342	; 0x342 <send_command>
	
    send_command(0x20, 0x3B);//PWR_UP = 1 ================================================================
 4c6:	80 e2       	ldi	r24, 0x20	; 32
 4c8:	6b e3       	ldi	r22, 0x3B	; 59
 4ca:	0e 94 a1 01 	call	0x342	; 0x342 <send_command>
    
	sbi(L01_AUX_PORT, L01_CE);//CE = 1
 4ce:	8b e2       	ldi	r24, 0x2B	; 43
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	2b e2       	ldi	r18, 0x2B	; 43
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	f9 01       	movw	r30, r18
 4d8:	20 81       	ld	r18, Z
 4da:	20 64       	ori	r18, 0x40	; 64
 4dc:	fc 01       	movw	r30, r24
 4de:	20 83       	st	Z, r18

}
 4e0:	cf 91       	pop	r28
 4e2:	df 91       	pop	r29
 4e4:	08 95       	ret

000004e6 <rx_data_nRF24L01>:



//Gets data from 24L01 and puts it in rf_rx_array, resets all ints
void rx_data_nRF24L01(void)
{
 4e6:	df 93       	push	r29
 4e8:	cf 93       	push	r28
 4ea:	00 d0       	rcall	.+0      	; 0x4ec <rx_data_nRF24L01+0x6>
 4ec:	00 d0       	rcall	.+0      	; 0x4ee <rx_data_nRF24L01+0x8>
 4ee:	cd b7       	in	r28, 0x3d	; 61
 4f0:	de b7       	in	r29, 0x3e	; 62
    uint8_t i, j, data, cmd;

    cmd = 0x61; //Read RX payload ==========================================================================================
 4f2:	81 e6       	ldi	r24, 0x61	; 97
 4f4:	8c 83       	std	Y+4, r24	; 0x04
    
	cbi(L01_AUX_PORT, L01_CSN);//CSN = 0
 4f6:	8b e2       	ldi	r24, 0x2B	; 43
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	2b e2       	ldi	r18, 0x2B	; 43
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	f9 01       	movw	r30, r18
 500:	20 81       	ld	r18, Z
 502:	2d 7f       	andi	r18, 0xFD	; 253
 504:	fc 01       	movw	r30, r24
 506:	20 83       	st	Z, r18
	delay_us(RF_DELAY);
 508:	85 e0       	ldi	r24, 0x05	; 5
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_us>
    
    for(i = 0 ; i < 8 ; i++)
 510:	19 82       	std	Y+1, r1	; 0x01
 512:	36 c0       	rjmp	.+108    	; 0x580 <rx_data_nRF24L01+0x9a>
    {
		if(cmd & 0b10000000)
 514:	8c 81       	ldd	r24, Y+4	; 0x04
 516:	88 23       	and	r24, r24
 518:	54 f4       	brge	.+20     	; 0x52e <rx_data_nRF24L01+0x48>
			sbi(L01_PORT, MOSI);
 51a:	85 e2       	ldi	r24, 0x25	; 37
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	25 e2       	ldi	r18, 0x25	; 37
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	f9 01       	movw	r30, r18
 524:	20 81       	ld	r18, Z
 526:	28 60       	ori	r18, 0x08	; 8
 528:	fc 01       	movw	r30, r24
 52a:	20 83       	st	Z, r18
 52c:	09 c0       	rjmp	.+18     	; 0x540 <rx_data_nRF24L01+0x5a>
		else
			cbi(L01_PORT, MOSI);
 52e:	85 e2       	ldi	r24, 0x25	; 37
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	25 e2       	ldi	r18, 0x25	; 37
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	f9 01       	movw	r30, r18
 538:	20 81       	ld	r18, Z
 53a:	27 7f       	andi	r18, 0xF7	; 247
 53c:	fc 01       	movw	r30, r24
 53e:	20 83       	st	Z, r18
		
		sbi(L01_PORT, L01_SCK); //L01_SCK = 1;
 540:	85 e2       	ldi	r24, 0x25	; 37
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	25 e2       	ldi	r18, 0x25	; 37
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	f9 01       	movw	r30, r18
 54a:	20 81       	ld	r18, Z
 54c:	20 62       	ori	r18, 0x20	; 32
 54e:	fc 01       	movw	r30, r24
 550:	20 83       	st	Z, r18
		delay_us(RF_DELAY);
 552:	85 e0       	ldi	r24, 0x05	; 5
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_us>

		cbi(L01_PORT, L01_SCK); //L01_SCK = 0; 
 55a:	85 e2       	ldi	r24, 0x25	; 37
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	25 e2       	ldi	r18, 0x25	; 37
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	f9 01       	movw	r30, r18
 564:	20 81       	ld	r18, Z
 566:	2f 7d       	andi	r18, 0xDF	; 223
 568:	fc 01       	movw	r30, r24
 56a:	20 83       	st	Z, r18
		delay_us(RF_DELAY);
 56c:	85 e0       	ldi	r24, 0x05	; 5
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_us>
		
        cmd <<= 1;
 574:	8c 81       	ldd	r24, Y+4	; 0x04
 576:	88 0f       	add	r24, r24
 578:	8c 83       	std	Y+4, r24	; 0x04
    cmd = 0x61; //Read RX payload ==========================================================================================
    
	cbi(L01_AUX_PORT, L01_CSN);//CSN = 0
	delay_us(RF_DELAY);
    
    for(i = 0 ; i < 8 ; i++)
 57a:	89 81       	ldd	r24, Y+1	; 0x01
 57c:	8f 5f       	subi	r24, 0xFF	; 255
 57e:	89 83       	std	Y+1, r24	; 0x01
 580:	89 81       	ldd	r24, Y+1	; 0x01
 582:	88 30       	cpi	r24, 0x08	; 8
 584:	38 f2       	brcs	.-114    	; 0x514 <rx_data_nRF24L01+0x2e>
		
        cmd <<= 1;
		
    }
    
    for (j = 0; j < 4; j++)
 586:	1a 82       	std	Y+2, r1	; 0x02
 588:	42 c0       	rjmp	.+132    	; 0x60e <rx_data_nRF24L01+0x128>
    {
        data = 0;
 58a:	1b 82       	std	Y+3, r1	; 0x03
        
        for(i = 0 ; i < 8 ; i++)
 58c:	19 82       	std	Y+1, r1	; 0x01
 58e:	31 c0       	rjmp	.+98     	; 0x5f2 <rx_data_nRF24L01+0x10c>
        {
            data <<= 1;
 590:	8b 81       	ldd	r24, Y+3	; 0x03
 592:	88 0f       	add	r24, r24
 594:	8b 83       	std	Y+3, r24	; 0x03
            if(L01_PORT_PIN & (1<<MISO) ) data |= 0x01;
 596:	83 e2       	ldi	r24, 0x23	; 35
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	fc 01       	movw	r30, r24
 59c:	80 81       	ld	r24, Z
 59e:	88 2f       	mov	r24, r24
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	80 71       	andi	r24, 0x10	; 16
 5a4:	90 70       	andi	r25, 0x00	; 0
 5a6:	00 97       	sbiw	r24, 0x00	; 0
 5a8:	21 f0       	breq	.+8      	; 0x5b2 <rx_data_nRF24L01+0xcc>
 5aa:	8b 81       	ldd	r24, Y+3	; 0x03
 5ac:	81 60       	ori	r24, 0x01	; 1
 5ae:	8b 83       	std	Y+3, r24	; 0x03
 5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <rx_data_nRF24L01+0xd2>
			else data &= 0xFE;
 5b2:	8b 81       	ldd	r24, Y+3	; 0x03
 5b4:	8e 7f       	andi	r24, 0xFE	; 254
 5b6:	8b 83       	std	Y+3, r24	; 0x03

			sbi(L01_PORT, L01_SCK); //L01_SCK = 1;
 5b8:	85 e2       	ldi	r24, 0x25	; 37
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	25 e2       	ldi	r18, 0x25	; 37
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	f9 01       	movw	r30, r18
 5c2:	20 81       	ld	r18, Z
 5c4:	20 62       	ori	r18, 0x20	; 32
 5c6:	fc 01       	movw	r30, r24
 5c8:	20 83       	st	Z, r18
			delay_us(RF_DELAY);
 5ca:	85 e0       	ldi	r24, 0x05	; 5
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_us>
            
			cbi(L01_PORT, L01_SCK); //L01_SCK = 0; 
 5d2:	85 e2       	ldi	r24, 0x25	; 37
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	25 e2       	ldi	r18, 0x25	; 37
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	f9 01       	movw	r30, r18
 5dc:	20 81       	ld	r18, Z
 5de:	2f 7d       	andi	r18, 0xDF	; 223
 5e0:	fc 01       	movw	r30, r24
 5e2:	20 83       	st	Z, r18
			delay_us(RF_DELAY);
 5e4:	85 e0       	ldi	r24, 0x05	; 5
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_us>
    
    for (j = 0; j < 4; j++)
    {
        data = 0;
        
        for(i = 0 ; i < 8 ; i++)
 5ec:	89 81       	ldd	r24, Y+1	; 0x01
 5ee:	8f 5f       	subi	r24, 0xFF	; 255
 5f0:	89 83       	std	Y+1, r24	; 0x01
 5f2:	89 81       	ldd	r24, Y+1	; 0x01
 5f4:	88 30       	cpi	r24, 0x08	; 8
 5f6:	60 f2       	brcs	.-104    	; 0x590 <rx_data_nRF24L01+0xaa>
            
			cbi(L01_PORT, L01_SCK); //L01_SCK = 0; 
			delay_us(RF_DELAY);
        }
		
		rf_rx_array[j] = data;
 5f8:	8a 81       	ldd	r24, Y+2	; 0x02
 5fa:	88 2f       	mov	r24, r24
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	88 5f       	subi	r24, 0xF8	; 248
 600:	9e 4f       	sbci	r25, 0xFE	; 254
 602:	2b 81       	ldd	r18, Y+3	; 0x03
 604:	fc 01       	movw	r30, r24
 606:	20 83       	st	Z, r18
		
        cmd <<= 1;
		
    }
    
    for (j = 0; j < 4; j++)
 608:	8a 81       	ldd	r24, Y+2	; 0x02
 60a:	8f 5f       	subi	r24, 0xFF	; 255
 60c:	8a 83       	std	Y+2, r24	; 0x02
 60e:	8a 81       	ldd	r24, Y+2	; 0x02
 610:	84 30       	cpi	r24, 0x04	; 4
 612:	08 f4       	brcc	.+2      	; 0x616 <rx_data_nRF24L01+0x130>
 614:	ba cf       	rjmp	.-140    	; 0x58a <rx_data_nRF24L01+0xa4>
		
		rf_rx_array[j] = data;
 
    }
    
    sbi(L01_PORT, L01_CSN);//CSN = 1
 616:	85 e2       	ldi	r24, 0x25	; 37
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	25 e2       	ldi	r18, 0x25	; 37
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	f9 01       	movw	r30, r18
 620:	20 81       	ld	r18, Z
 622:	22 60       	ori	r18, 0x02	; 2
 624:	fc 01       	movw	r30, r24
 626:	20 83       	st	Z, r18
    
    send_byte(0xE2);//Flush RX FIFO =============================================================
 628:	82 ee       	ldi	r24, 0xE2	; 226
 62a:	0e 94 c9 01 	call	0x392	; 0x392 <send_byte>

	send_command(0x27, 0x40);//reset int =========================================================
 62e:	87 e2       	ldi	r24, 0x27	; 39
 630:	60 e4       	ldi	r22, 0x40	; 64
 632:	0e 94 a1 01 	call	0x342	; 0x342 <send_command>
    
}
 636:	0f 90       	pop	r0
 638:	0f 90       	pop	r0
 63a:	0f 90       	pop	r0
 63c:	0f 90       	pop	r0
 63e:	cf 91       	pop	r28
 640:	df 91       	pop	r29
 642:	08 95       	ret

00000644 <main>:
#include "nRF24L01_lib.h"



int main(void)
{
 644:	df 93       	push	r29
 646:	cf 93       	push	r28
 648:	cd b7       	in	r28, 0x3d	; 61
 64a:	de b7       	in	r29, 0x3e	; 62
	//setup radio for transmission
	
    while(1)
    {
        //continually transmit
		config_tx_nRF24L01();
 64c:	0e 94 2a 01 	call	0x254	; 0x254 <config_tx_nRF24L01>
		data_array[0] = "H";//rf_tx_array[0];
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	80 93 0c 01 	sts	0x010C, r24
		data_array[1] = "E";//rf_tx_array[1];
 658:	82 e0       	ldi	r24, 0x02	; 2
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	80 93 0d 01 	sts	0x010D, r24
		data_array[2] = "L";//rf_tx_array[2];
 660:	84 e0       	ldi	r24, 0x04	; 4
 662:	91 e0       	ldi	r25, 0x01	; 1
 664:	80 93 0e 01 	sts	0x010E, r24
		data_array[3] = "O";//rf_tx_array[3];
 668:	86 e0       	ldi	r24, 0x06	; 6
 66a:	91 e0       	ldi	r25, 0x01	; 1
 66c:	80 93 0f 01 	sts	0x010F, r24
		tx_data_nRF24L01();
 670:	0e 94 fe 00 	call	0x1fc	; 0x1fc <tx_data_nRF24L01>
		config_rx_nRF24L01();
 674:	0e 94 46 02 	call	0x48c	; 0x48c <config_rx_nRF24L01>
		delay_ms(100);	
 678:	84 e6       	ldi	r24, 0x64	; 100
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	0e 94 7a 00 	call	0xf4	; 0xf4 <delay_ms>
    }
 680:	e5 cf       	rjmp	.-54     	; 0x64c <main+0x8>

00000682 <_exit>:
 682:	f8 94       	cli

00000684 <__stop_program>:
 684:	ff cf       	rjmp	.-2      	; 0x684 <__stop_program>
